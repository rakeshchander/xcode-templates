disabled_rules: # rule identifiers to exclude from running
  
  # Rationale: Clarity of code
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#multiple-closures-with-trailing-closure
  - multiple_closures_with_trailing_closure


  # Rationale: Custom rule overrides to allow todos when issue links are provided.
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#todo
  - todo

  
opt_in_rules: # some rules are only opt-in

  # Rationale: When using map, we think of it being used to transform a current array into something else
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#array-init
  - array_init


  # Rationale: Provides consistency in coding style
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#closure-spacing
  - closure_spacing

  # Rationale: Encourages usage of assertion failures and thinking about what you are returning
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#conditional-returns-on-newline
  - conditional_returns_on_newline

  # Rationale: A more clear and consise way to check if something exists
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#contains_over_filter_count
  - contains_over_filter_count
  
  # Rationale: A more clear and consise way to check if something exists
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#contains_over_filter_is_empty
  - contains_over_filter_is_empty

  # Rationale: A more clear and consise way to check if something exists
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#contains-over-first-not-nil
  - contains_over_first_not_nil

  # Rationale: A more clear and consise way to check if a range exists
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#contains_over_range_nil_comparison
  - contains_over_range_nil_comparison


  # Rationale: A nil bool is a tri-state variable which can be modeled more clearly
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#discouraged-optional-boolean
  - discouraged_optional_boolean


  # Rationale: Provides consistency in coding style
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#empty_collection_literal
  - empty_collection_literal

  # Rationale: Provides consistency in coding style and follows modern practices of the language
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#empty-count
  - empty_count

  # Rationale: Provides consistency in coding style and brevity.
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#empty-enum-arguments
  - empty_enum_arguments

  # Rationale: Provides consistency in coding style and follows modern practices of the language
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#empty-parameters
  - empty_parameters

  # Rationale: Provides consistency in coding style and follows modern practices of the language
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#empty-string
  - empty_string

  # Rationale: Provides consistency in coding style
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#explicit-init
  - explicit_init

  # Rationale: Prevents coder error
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#fallthrough
  - fallthrough

  # Rationale: Encourages better documentation
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#fatal-error-message
  - fatal_error_message


  # Rationale: Provides consistency in coding style
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#flatmap_over_map_reduce
  - flatmap_over_map_reduce

  # Rationale: Encourages using the right API to solve a problem
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#for-where
  - for_where


  # Rationale: Prevents coder error, doesn't crash, makes coder be explicit about their assumptions
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#force-unwrapping
  - force_unwrapping

  # Rationale: Prevents coder error, doesn't crash, makes coder be explicit about their assumptions
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#implicitly-unwrapped-optional
  - implicitly_unwrapped_optional

  # Rationale: Encourages using the right API to solve a problem
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#is-disjoint
  - is_disjoint

  # Rationale: Provides clarity and consistency by using the default parameter
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#joined-default-parameter
  - joined_default_parameter

  # Rationale: Provides consistency in coding style
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#last-where
  - last_where

  # Rationale: Provides consistency in coding style
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#leading-whitespace
  - leading_whitespace

  # Rationale: Usage of proper access level
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#lower-acl-than-parent
  - lower_acl_than_parent

  # Rationale: Provides consistency in coding style
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#operator-usage-whitespace
  - operator_usage_whitespace

  # Rationale: Provides consistency in coding style
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#operator-function-whitespace
  - operator_whitespace

  # Rationale: Prevents coder error
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#overridden-methods-call-super
  - overridden_super_call

  # Rationale: Prevents unpredictable behavior
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#override-in-extension
  - override_in_extension

  # Rationale: Promotes consistency and reduces duplication.
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#pattern-matching-keywords
  - pattern_matching_keywords
  
  # Rationale: Provides consistency in coding style and brevity
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#redundant-nil-coalescing
  - redundant_nil_coalescing

  # Rationale: Provides consistency in coding style and brevity
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#redundant-objc-attribute
  - redundant_objc_attribute

  # Rationale: Provides consistency in coding style and brevity
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#redundant-optional-initialization
  - redundant_optional_initialization

  # Rationale: Provides consistency in coding style and brevity
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#redundant-void-return
  - redundant_void_return

  # Rationale: Provides consistency in coding style
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#required-enum-case
  - required_enum_case

  # Rationale: Provides consistency in coding style
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#returning-whitespace
  - return_arrow_whitespace

  # Rationale: Provides consistency in coding style
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#shorthand-operator
  - shorthand_operator

  # Rationale: Provides consistency and clarity in coding style and is less code
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#min-or-max-over-sorted-first-or-last
  - sorted_first_last
  
  # Rationale: Provides consistency in coding style
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#yoda-condition-rule
  - yoda_condition

  # Rationale: Encourages documentation
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#todo
  - custom_todo

  
  # Rationale: Prevents issues with using unowned.
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#unowned-variable-capture
  - unowned_variable_capture
  
  # Rationale: Provides consistency in coding style.
  # https://github.com/realm/SwiftLint/blob/master/Rules.md#legacy-multiple
  - legacy_multiple
  
  - missing_docs
  - file_name
  - attributes
  - anyobject_protocol
  - strong_iboutlet
  - modifier_order

excluded: # paths to ignore during linting. Takes precedence over `included`.
  - Pods
  - ./*Tests/*

line_length:
- 200 # warning

type_body_length:
- 750

function_parameter_count:
- 7

custom_rules:
  custom_todo:
    included: ".*.swift"
    name: "TODO Violation"
    regex: "(TODO).(?!.*(https&)).(?!.*issues)"
    match_kinds: comment
    message: "TODOs must include a link to the github issue."
    severity: warning

  print:
    included: ".*.swift"
    name: "Logging"
    message: "Use Core Library LogUtils for console output."
    regex: '(print|NSLog)\('
    severity: warning
    
  multiple_empty_lines:
    included: ".*.swift"
    name: "Multiple Empty Lines"
    regex: '((?:\s*\n){3,})'
    message: "There are too many line breaks"
    severity: error
    
  image_initialization: # Disable UIImage init from name
    included: ".*.swift"
    name: "Image initialization"
    regex: 'UIImage\(named:[^)]+\)'
    message: "Use UIImage.initImage(imageName: String, targetBundle:Bundle) instead (from Core Library)"
    severity: error
    
  color_initialization:
    included: ".*.swift"
    name: "UIColor Initialization"
    message: "Use UIColor.initColor(colorName: String, targetBundle:Bundle) instead (from Core Library)"
    regex: 'UIColor\((hexString|red):[^)]+\)'
    severity: error
    
  view_controller_initialization:
    included: ".*.swift"
    name: "View Controller Initialization"
    message: "Use <Class_Name>.instantiate() instead (from Core Library)"
    regex: '[a-zA-Z]+(?i)(ViewController|VC)(.init|)\((nib|\))'
    severity: error
    
  nib_initialization:
    included: ".*.swift"
    name: "Nib Initialization"
    message: "Use <Class_Name>.getNib() instead (from Core Library)"
    regex: 'UINib(.init|)\(nibName:'
    severity: error

  non_weak_delegate_datasource:
    included: ".*.swift"
    name: "Retain Cycle"
    regex: '^\ *var\ *(delegate)'
    message: "Delegate/datasource may be weak."
    severity: warning

  no_fatal_errors:
    included: ".*.swift"
    name: "!!Crash!!"
    regex: "fatalError"
    message: "Don't use fatalError()"
    severity: error
    

  swiftlint_file_disabling:
    included: ".*.swift"
    name: "SwiftLint File Disabling"
    regex: "swiftlint:disable\\s"
    match_kinds:
      - comment
    message: "Prefer swiftlint:disable:next or swiftlint:disable:this"
    severity: warning
    
  optional_try:
    included: ".*.swift"
    name: "Optional Try"
    regex: "(try[!,?])"
    message: "You should wrap a `try` in a `do/catch` loop rather than forcibly or optionally attempting it."
    severity: error

  weak_self_closure:
    included: ".*.swift"
    name: "Use weak self in closures"
    message: "Use weak self when create a closure."
    regex: "\\{\\s*[^\\[]{0,50}\\s+\\bin\\b([a-zA-Z\\\\.\\(\\)\\[\\{\\}\\>\\/\\=]|\\s)+(self)[^!]"

    severity: error
    
  multiline_commented_code:
    included: ".*.swift"
    name: "Commented Code"
    regex: '(?<!:|\/)\/\/\h*[a-z.](?!wiftlint)'
    match_kinds: comment
    message: "Comment starting with lowercase letter - did you forget to delete old code?"

  unowned:
    included: ".*.swift"
    name: "Unowned"
    regex: '(unowned)'
    message: "Use `weak` instead."
    severity: warning

  localized_string:
    name: "NSLocalizedString"
    regex: "NSLocalizedString"
    message: "Use getLocalisedValue(targetBundle: Bundle) from CoreLibrary instead"
    severity: error

  string_literal:
    included: ".*.swift"
    excluded: ".*(?i)(Constant|Model|DAO)(|s).swift"
    name: "String Literal"
    regex: '"(.*?)"'
    message: "Don't use string lietral directly. Refer them using Constants file. For localised strings use getLocalisedValue(targetBundle: Bundle) from CoreLibrary"
    severity: error


  protocol_conformance:
    included: ".*.swift"
    name: "Protocol Conformance"
    message: "Protocol conformance should be declared in separate extensions in the same file"
    regex: "(class|struct|extension)[[:space:]]+(?i:(?![^d]*delegate:))[^'\"()<>{},!?:]+:([^'\"<>(){},!?:]+,)+[^'\"<>(){},!?:]*\\{"
    match_kinds:
      - keyword
    severity: warning
    
  public_viewmodel:
    included: ".*.swift"
    name: "Public ViewModel"
    regex: "^(open |private |internal |)class [a-zA-Z]+(?i)ViewModel"
    message: "ViewModel must be public only."
    severity: error
    
  public_ui_model:
    included: ".*.swift"
    name: "Public UIModel"
    regex: "^(open |private |internal |)(class|struct) [a-zA-Z]+(?i)UI(Model|DAO)"
    message: "UIModel must be public only."
    severity: error
    
  non_public_datamodel:
    included: ".*.swift"
    name: "Non Public Data Model"
    regex: "^(open |private |public )(class|struct) [a-zA-Z]+(?i)(Request|Response)(Model|DAO|)"
    message: "Data Model must be internal only."
    severity: error
    
  non_public_datasource:
    included: ".*.swift"
    name: "Non Public DataSource"
    regex: "^(open |private |public )(class|struct) [a-zA-Z]+(?i)DataSource"
    message: "Data Source must be internal only."
    severity: error
    
  open_viewcontroller:
    included: ".*.swift"
    name: "Open ViewController"
    regex: "^(public |private |internal |)class [a-zA-Z]+(?i)(ViewController|VC)"
    message: "ViewCotrollers must be open only."
    severity: error
    
  public_module:
    included: ".*.swift"
    name: "Public Module"
    regex: '^(open |private |internal |)class [a-zA-Z]+(?i)Module'
    message: "Module must be public only."
    severity: error
    
  public_iboutlet:
    included: ".*.swift"
    name: "Public IBOutlets"
    regex: "@IBOutlet( open | private | internal | )var"
    message: "IBOutlets must be public only."
    severity: error
    
  optional_iboutlet:
    included: ".*.swift"
    name: "Optional IBOutlets"
    regex: "@IBOutlet [ a-zA-Z]+: [a-zA-Z]+!\n"
    message: "IBOutlets must be optional(?)."
    severity: error
    
  open_ibaction:
    included: ".*.swift"
    name: "Open IBActions"
    regex: "@IBAction( public | private | internal | )func"
    message: "IBActions must be open only."
    severity: error
    
  dont_import_uikit_in_viewmodel:
    included: ".*(?i)ViewModel.swift"
    name: "Don't import UIKit in ViewModel"
    regex: "^import (UIKit|iOS_UI_Library)$"
    message: "Don't import UIKit / iOS_UI_Library in ViewModel"
    severity: error
    
  dont_import_uikit_in_model:
    included: ".*(?i)Model.swift"
    name: "Don't import UIKit in Model"
    regex: "^import (UIKit|iOS_UI_Library)$"
    message: "Don't import UIKit / iOS_UI_Library in Model"
    severity: error
    
  dont_import_uikit_in_datasource:
    included: ".*(?i)DataSource.swift"
    name: "Don't import UIKit in DataSource"
    regex: "^import (UIKit|iOS_UI_Library)$"
    message: "Don't import UIKit / iOS_UI_Library in DataSource"
    severity: error

  dont_use_codable_protocol_directly:
    included: ".*.swift"
    name: "Use AddOn Model Classes as parent model"
    regex: ":( |)(Codable|Encodable|Decodable)"
    message: "Use CoreResponseModel for Decodable, CoreRequestModel for Encodable & CoreAPIModel for Codable"
    severity: error

  font_initialization:
    included: ".*.swift"
    name: "UIFont Initialization"
    message: "Use FontCache instead (from Core Library)"
    regex: '(UIFont.init|UIFont.system|UIFont.bold)'
    severity: error
